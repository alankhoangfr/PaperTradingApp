var _templateObject = _taggedTemplateLiteralLoose(['\n.alert-enter {\n  left: -600px;\n  }\n\n.alert-enter.alert-enter-active {\n  left: 0;\n  transition: left 300ms ease-in;\n}\n\n.alert-exit {\n  opacity: 1;\n}\n\n.alert-exit.alert-exit-active {\n  opacity: 0.01;\n  transition: opacity 200ms ease-in;\n}\n'], ['\n.alert-enter {\n  left: -600px;\n  }\n\n.alert-enter.alert-enter-active {\n  left: 0;\n  transition: left 300ms ease-in;\n}\n\n.alert-exit {\n  opacity: 1;\n}\n\n.alert-exit.alert-exit-active {\n  opacity: 0.01;\n  transition: opacity 200ms ease-in;\n}\n']),
    _templateObject2 = _taggedTemplateLiteralLoose(['\n  @import url(\'https://fonts.googleapis.com/css?family=Open+Sans\');\n  max-width: 600px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  margin: 50px;\n  z-index: 1000;\n  color: white;\n  border-radius: 3px;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-family: \'Open Sans\', sans-serif;\n  .Alert-message-container {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    justify-content: flex-start;\n    .icon {\n      margin: auto auto;\n      font-size: 24px;\n    }\n  }\n  p {\n    text-align: left;\n    margin: 0;\n    padding: 3px 20px;\n    font-weight: 500;\n  }\n\n'], ['\n  @import url(\'https://fonts.googleapis.com/css?family=Open+Sans\');\n  max-width: 600px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  margin: 50px;\n  z-index: 1000;\n  color: white;\n  border-radius: 3px;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-family: \'Open Sans\', sans-serif;\n  .Alert-message-container {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    justify-content: flex-start;\n    .icon {\n      margin: auto auto;\n      font-size: 24px;\n    }\n  }\n  p {\n    text-align: left;\n    margin: 0;\n    padding: 3px 20px;\n    font-weight: 500;\n  }\n\n']);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

import React, { Component } from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle, faTimesCircle, faExclamationCircle, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';

var openAlertFunction = void 0;
var timer = void 0;

var Container = styled.div(_templateObject);

var StyledAlert = styled.div(_templateObject2);

var Alert = function (_Component) {
  _inherits(Alert, _Component);

  function Alert() {
    _classCallCheck(this, Alert);

    var _this = _possibleConstructorReturn(this, _Component.call(this));

    _this.state = {
      open: false,
      type: '',
      message: ''
    };
    _this.closeAlert = _this.closeAlert.bind(_this);
    _this.openAlert = _this.openAlert.bind(_this);
    return _this;
  }

  Alert.prototype.componentDidMount = function componentDidMount() {
    openAlertFunction = this.openAlert;
  };

  Alert.prototype.openAlert = function openAlert(_ref) {
    var message = _ref.message,
        type = _ref.type,
        duration = _ref.duration;

    var displayTime = duration || 2500;
    var component = this;
    if (component.state.open === false) {
      component.setState({
        open: true,
        message: message,
        type: type
      });
      timer = setTimeout(function () {
        component.closeAlert();
      }, displayTime);
    } else {
      clearTimeout(timer);
      this.closeAlert();
      component.setState({
        open: true,
        message: message,
        type: type
      });
      timer = setTimeout(function () {
        component.closeAlert();
      }, displayTime);
    }
  };

  Alert.prototype.closeAlert = function closeAlert() {
    this.setState({
      open: false,
      message: '',
      type: ''
    });
  };

  Alert.prototype.testColor = function testColor(color) {
    var regexp = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/; // tests for hex colors
    if (color) return regexp.test(color) ? color : false;
    return false;
  };

  Alert.prototype.getIcon = function getIcon() {
    var type = this.state.type;

    var icons = {
      success: faCheckCircle,
      danger: faTimesCircle,
      warning: faExclamationCircle,
      info: faQuestionCircle
    };
    return icons[type];
  };

  Alert.prototype.getBGColor = function getBGColor() {
    var type = this.state.type;
    var _props = this.props,
        infoColor = _props.infoColor,
        warningColor = _props.warningColor,
        dangerColor = _props.dangerColor,
        successColor = _props.successColor;

    var colors = {
      success: this.testColor(successColor) || '#28A745',
      danger: this.testColor(dangerColor) || '#DB3545',
      info: this.testColor(infoColor) || '#15A2B8',
      warning: this.testColor(warningColor) || '#FEC108'
    };
    return type ? colors[type] : colors.info;
  };

  Alert.prototype.render = function render() {
    var open = this.state.open;
    var fontColor = this.props.fontColor;

    var color = this.testColor(fontColor) ? fontColor : '#ffffff';
    var message = React.createElement(
      'span',
      { className: 'Alert-message-container' },
      React.createElement(FontAwesomeIcon, { className: 'icon', icon: this.getIcon() }),
      React.createElement(
        'p',
        { className: 'Alert-text', style: { color: color } },
        this.state.message
      )
    );
    return React.createElement(
      Container,
      null,
      React.createElement(
        TransitionGroup,
        null,
        open ? React.createElement(
          CSSTransition,
          {
            key: this.state.message,
            classNames: 'alert',
            timeout: { enter: 300, exit: 200 }
          },
          React.createElement(
            StyledAlert,
            {
              className: 'Alert-container',
              style: { background: '' + this.getBGColor() } },
            message
          )
        ) : null
      )
    );
  };

  return Alert;
}(Component);

export { Alert as default };


Alert.propTypes = process.env.NODE_ENV !== "production" ? {
  dangerColor: PropTypes.string,
  warningColor: PropTypes.string,
  successColor: PropTypes.string,
  infoColor: PropTypes.string,
  fontColor: PropTypes.string
} : {};

Alert.defaultProps = {
  dangerColor: undefined,
  warningColor: undefined,
  successColor: undefined,
  infoColor: undefined,
  fontColor: undefined
};

export function openAlert(_ref2) {
  var message = _ref2.message,
      type = _ref2.type,
      duration = _ref2.duration;

  openAlertFunction({ message: message, type: type, duration: duration });
}